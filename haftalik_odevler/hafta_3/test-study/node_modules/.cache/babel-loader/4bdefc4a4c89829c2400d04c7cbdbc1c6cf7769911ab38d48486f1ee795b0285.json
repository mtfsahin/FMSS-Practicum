{"ast":null,"code":"var _jsxFileName = \"/Users/mustafa-mac/Documents/GitHub/FMSS-Practicum/haftalik_odevler/hafta_3/test-study/src/filterEmoji.js\";\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport filterEmoji from './filterEmoji';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndescribe('filterEmoji', () => {\n  it('should filter emoji list correctly', () => {\n    const emojiList = [{\n      title: 'Smile',\n      keywords: ['happy', 'face']\n    }, {\n      title: 'Cry',\n      keywords: ['sad', 'face']\n    }, {\n      title: 'Heart',\n      keywords: ['love']\n    }];\n    const filteredEmojiList = filterEmoji('happy', 2);\n    expect(filteredEmojiList).toEqual([{\n      title: 'Smile',\n      keywords: ['happy', 'face']\n    }]);\n    render( /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredEmojiList.map(emoji => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: emoji.title\n      }, emoji.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this));\n    expect(screen.getByText('Smile')).toBeInTheDocument();\n    expect(screen.queryByText('Cry')).not.toBeInTheDocument();\n    expect(screen.queryByText('Heart')).not.toBeInTheDocument();\n    expect(screen.getAllByRole('listitem')).toHaveLength(1);\n  });\n});","map":{"version":3,"names":["React","render","screen","filterEmoji","jsxDEV","_jsxDEV","describe","it","emojiList","title","keywords","filteredEmojiList","expect","toEqual","children","map","emoji","fileName","_jsxFileName","lineNumber","columnNumber","getByText","toBeInTheDocument","queryByText","not","getAllByRole","toHaveLength"],"sources":["/Users/mustafa-mac/Documents/GitHub/FMSS-Practicum/haftalik_odevler/hafta_3/test-study/src/filterEmoji.js"],"sourcesContent":["import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport filterEmoji from './filterEmoji';\n\ndescribe('filterEmoji', () => {\n  it('should filter emoji list correctly', () => {\n    const emojiList = [\n      { title: 'Smile', keywords: ['happy', 'face'] },\n      { title: 'Cry', keywords: ['sad', 'face'] },\n      { title: 'Heart', keywords: ['love'] },\n    ];\n    const filteredEmojiList = filterEmoji('happy', 2);\n    expect(filteredEmojiList).toEqual([{ title: 'Smile', keywords: ['happy', 'face'] }]);\n    render(\n      <ul>\n        {filteredEmojiList.map((emoji) => (\n          <li key={emoji.title}>{emoji.title}</li>\n        ))}\n      </ul>\n    );\n    expect(screen.getByText('Smile')).toBeInTheDocument();\n    expect(screen.queryByText('Cry')).not.toBeInTheDocument();\n    expect(screen.queryByText('Heart')).not.toBeInTheDocument();\n    expect(screen.getAllByRole('listitem')).toHaveLength(1);\n  });\n});\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,MAAM,QAAQ,wBAAwB;AACvD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExCC,QAAQ,CAAC,aAAa,EAAE,MAAM;EAC5BC,EAAE,CAAC,oCAAoC,EAAE,MAAM;IAC7C,MAAMC,SAAS,GAAG,CAChB;MAAEC,KAAK,EAAE,OAAO;MAAEC,QAAQ,EAAE,CAAC,OAAO,EAAE,MAAM;IAAE,CAAC,EAC/C;MAAED,KAAK,EAAE,KAAK;MAAEC,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM;IAAE,CAAC,EAC3C;MAAED,KAAK,EAAE,OAAO;MAAEC,QAAQ,EAAE,CAAC,MAAM;IAAE,CAAC,CACvC;IACD,MAAMC,iBAAiB,GAAGR,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC;IACjDS,MAAM,CAACD,iBAAiB,CAAC,CAACE,OAAO,CAAC,CAAC;MAAEJ,KAAK,EAAE,OAAO;MAAEC,QAAQ,EAAE,CAAC,OAAO,EAAE,MAAM;IAAE,CAAC,CAAC,CAAC;IACpFT,MAAM,eACJI,OAAA;MAAAS,QAAA,EACGH,iBAAiB,CAACI,GAAG,CAAEC,KAAK,iBAC3BX,OAAA;QAAAS,QAAA,EAAuBE,KAAK,CAACP;MAAK,GAAzBO,KAAK,CAACP,KAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACrB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC,CACN;IACDR,MAAM,CAACV,MAAM,CAACmB,SAAS,CAAC,OAAO,CAAC,CAAC,CAACC,iBAAiB,EAAE;IACrDV,MAAM,CAACV,MAAM,CAACqB,WAAW,CAAC,KAAK,CAAC,CAAC,CAACC,GAAG,CAACF,iBAAiB,EAAE;IACzDV,MAAM,CAACV,MAAM,CAACqB,WAAW,CAAC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACF,iBAAiB,EAAE;IAC3DV,MAAM,CAACV,MAAM,CAACuB,YAAY,CAAC,UAAU,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;EACzD,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}